name: DeployTest

on:
  push:
    branches: [ '**' ]
    tags-ignore: [ '**' ]

jobs:
  SonarCloud:
    runs-on: windows-latest
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          submodules: true
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"aneoconsulting_ArmoniK.Extensions.Csharp" /o:"aneoconsulting" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build ArmoniK.Extensions.Csharp.sln
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"


  versionning:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.genver.outputs.version }}
      release: ${{ steps.genver.outputs.release }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0

    - name: Generate Version
      id: genver
      run: |
        VERSION=$(docker run --rm -v $(pwd):/repo codacy/git-version /bin/git-version --folder=/repo --release-branch=${{ github.ref_name }}-pre --dev-branch=master)
        echo "::set-output name=version::$VERSION"
        echo "VERSION : $VERSION"
        RELEASE=$(docker run --rm -v $(pwd):/repo codacy/git-version /bin/git-version --folder=/repo --release-branch=${{ github.ref_name }} --dev-branch=master)
        echo "::set-output name=release::$RELEASE"
        echo "RELEASE : $RELEASE"

  buildProjects:
    runs-on: ubuntu-latest
    needs:
      - versionning
    env:
      GENVERSION: ${{ needs.versionning.outputs.version }}
      GENRELEASE: ${{ needs.versionning.outputs.release }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }}
        submodules: true

    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.x
        source-url: https://pkgs.dev.azure.com/aneofr/ArmoniK/_packaging/ArmoniKPackages/nuget/v3/index.json
      env:
        NUGET_AUTH_TOKEN: ${{secrets.PAT_AZURE}}

    # find . -name "*.csproj" | xargs -I % echo dotnet build % -c Release
    - name: Build the package
      run: |
        dotnet build ./Common/ArmoniK.DevelopmentKit.Common/ArmoniK.DevelopmentKit.Common.csproj -c Release
        dotnet build ./Common/StreamWrapper/src/ArmoniK.Extensions.Common.StreamWrapper.csproj -c Release
        dotnet build ./Common/StreamWrapper/tests/Client/ArmoniK.Extensions.Common.StreamWrapper.Tests.Client.csproj -c Release
        dotnet build ./Common/StreamWrapper/tests/Common/ArmoniK.Extensions.Common.StreamWrapper.Tests.Common.csproj -c Release
        dotnet build ./Common/StreamWrapper/tests/Server/ArmoniK.Extensions.Common.StreamWrapper.Tests.Server.csproj -c Release
        dotnet build ./DataSynapseApi/ArmoniK.DevelopmentKit.GridServer/ArmoniK.DevelopmentKit.GridServer.csproj -c Release
        dotnet build ./DataSynapseApi/ArmoniK.DevelopmentKit.GridServer.Client/ArmoniK.DevelopmentKit.GridServer.Client.csproj -c Release
        dotnet build ./SymphonyApi/ArmoniK.DevelopmentKit.SymphonyApi/ArmoniK.DevelopmentKit.SymphonyApi.csproj -c Release
        dotnet build ./SymphonyApi/ArmoniK.DevelopmentKit.SymphonyApi.Client/ArmoniK.DevelopmentKit.SymphonyApi.Client.csproj -c Release
        dotnet build ./Common/EndToEnd.Tests/ArmoniK.EndToEndTests.csproj -c Release
        dotnet build ./WorkerApi/ArmoniK.DevelopmentKit.WorkerApi/ArmoniK.DevelopmentKit.WorkerApi.csproj -c Release
        dotnet build ./WorkerApi/ArmoniK.DevelopmentKit.WorkerApi.Common/ArmoniK.DevelopmentKit.WorkerApi.Common.csproj -c Release
        dotnet build ./WorkerApi/tests/WorkerApiTests/WorkerApiTests.csproj -c Release

    # find . -name "*.csproj" | xargs -I % echo dotnet pack % -c Release -o /tmp/packages -p:PackageVersion=\$GENVERSION
    - name: Pack the package VERSION
      run: |
        dotnet pack ./Common/ArmoniK.DevelopmentKit.Common/ArmoniK.DevelopmentKit.Common.csproj -c Release -o /tmp/packages -p:PackageVersion=$GENVERSION
        dotnet pack ./DataSynapseApi/ArmoniK.DevelopmentKit.GridServer/ArmoniK.DevelopmentKit.GridServer.csproj -c Release -o /tmp/packages -p:PackageVersion=$GENVERSION
        dotnet pack ./DataSynapseApi/ArmoniK.DevelopmentKit.GridServer.Client/ArmoniK.DevelopmentKit.GridServer.Client.csproj -c Release -o /tmp/packages -p:PackageVersion=$GENVERSION
        dotnet pack ./SymphonyApi/ArmoniK.DevelopmentKit.SymphonyApi/ArmoniK.DevelopmentKit.SymphonyApi.csproj -c Release -o /tmp/packages -p:PackageVersion=$GENVERSION
        dotnet pack ./SymphonyApi/ArmoniK.DevelopmentKit.SymphonyApi.Client/ArmoniK.DevelopmentKit.SymphonyApi.Client.csproj -c Release -o /tmp/packages -p:PackageVersion=$GENVERSION
        dotnet pack ./WorkerApi/ArmoniK.DevelopmentKit.WorkerApi.Common/ArmoniK.DevelopmentKit.WorkerApi.Common.csproj -c Release -o /tmp/packages -p:PackageVersion=$GENVERSION
        dotnet pack ./Common/StreamWrapper/src/ArmoniK.Extensions.Common.StreamWrapper.csproj -c Release -c Release -o /tmp/packages -p:PackageVersion=$GENVERSION

    - name: Store the package VERSION
      uses: actions/upload-artifact@v2
      with:
        name: prerelease-nugets
        path: /tmp/packages/*.nupkg
        retention-days: 5

    - name: Pack the package RELEASE
      if: ${{ github.ref == 'refs/heads/release' }}
      run: |
        dotnet pack ./Common/ArmoniK.DevelopmentKit.Common/ArmoniK.DevelopmentKit.Common.csproj -c Release -o /tmp/releases -p:PackageVersion=$GENRELEASE
        dotnet pack ./DataSynapseApi/ArmoniK.DevelopmentKit.GridServer/ArmoniK.DevelopmentKit.GridServer.csproj -c Release -o /tmp/releases -p:PackageVersion=$GENRELEASE
        dotnet pack ./DataSynapseApi/ArmoniK.DevelopmentKit.GridServer.Client/ArmoniK.DevelopmentKit.GridServer.Client.csproj -c Release -o /tmp/releases -p:PackageVersion=$GENRELEASE
        dotnet pack ./SymphonyApi/ArmoniK.DevelopmentKit.SymphonyApi/ArmoniK.DevelopmentKit.SymphonyApi.csproj -c Release -o /tmp/releases -p:PackageVersion=$GENRELEASE
        dotnet pack ./SymphonyApi/ArmoniK.DevelopmentKit.SymphonyApi.Client/ArmoniK.DevelopmentKit.SymphonyApi.Client.csproj -c Release -o /tmp/releases -p:PackageVersion=$GENRELEASE
        dotnet pack ./WorkerApi/ArmoniK.DevelopmentKit.WorkerApi.Common/ArmoniK.DevelopmentKit.WorkerApi.Common.csproj -c Release -o /tmp/releases -p:PackageVersion=$GENRELEASE
        dotnet pack ./Common/StreamWrapper/src/ArmoniK.Extensions.Common.StreamWrapper.csproj -c Release -c Release -o /tmp/releases -p:PackageVersion=$GENRELEASE

    - name: Store the package RELEASE
      if: ${{ github.ref == 'refs/heads/release' }}
      uses: actions/upload-artifact@v2
      with:
        name: release-nugets
        path: /tmp/releases/*.nupkg
        retention-days: 5

    - name: Push the package
      run: |
        dotnet nuget push /tmp/packages/ArmoniK.*.nupkg --api-key AzureArtifacts --skip-duplicate

  buildWorkerEnd2End:
    runs-on: ubuntu-latest
    needs:
      - versionning
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }}
        submodules: true

    - name: login
      run: |
        echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u dhaneo1 --password-stdin

    - name: build
      run: |
        docker build -t dockerhubaneo/armonik_worker_dll:$VERSION -f WorkerApi/ArmoniK.DevelopmentKit.WorkerApi/Dockerfile .

    - name: push
      run: |
        docker push dockerhubaneo/armonik_worker_dll:$VERSION

  buildWorkerStreamWrapperTest:
    runs-on: ubuntu-latest
    needs:
      - versionning
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }}
        submodules: true

    - name: login
      run: |
        echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u dhaneo1 --password-stdin

    - name: build
      run: |
        docker build -t dockerhubaneo/armonik_streamwrapper_test:$VERSION -f Common/StreamWrapper/tests/Server/Dockerfile .

    - name: push
      run: |
        docker push dockerhubaneo/armonik_streamwrapper_test:$VERSION

  testEndToEnd:
    needs:
      - versionning
      - buildProjects
      - buildWorkerEnd2End
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}

      - uses: aneoconsulting/ArmoniK@v2.7.x
        id: deploy-infra
        with:
          worker-image: dockerhubaneo/armonik_worker_dll
          worker-tag: ${{ needs.versionning.outputs.version }}

      - name: Run EndToEnd.Tests
        run: |
         export CPIP=$(kubectl get svc control-plane -n armonik -o custom-columns="IP:.spec.clusterIP" --no-headers=true)
         export CPPort=$(kubectl get svc control-plane -n armonik -o custom-columns="PORT:.spec.ports[*].port" --no-headers=true)
         export Grpc__Endpoint=http://$CPIP:$CPPort

         cd Common/EndToEnd.Tests/
         dotnet publish --self-contained -r linux-x64 -f net5.0

         mkdir -p ${HOME}/data
         cp -v ../packages/ArmoniK.EndToEndTests-v1.0.0-700.zip ${HOME}/data

         dotnet run -r linux-x64 -f net5.0

  testStreamWrapper:
    needs:
      - versionning
      - buildProjects
      - buildWorkerStreamWrapperTest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}

      - uses: aneoconsulting/ArmoniK@main
        id: deploy-infra
        with:
          worker-image: dockerhubaneo/armonik_streamwrapper_test
          worker-tag: ${{ needs.versionning.outputs.version }}

      - name: Run StreamWrapper.Tests
        run: |
         export CPIP=$(kubectl get svc control-plane -n armonik -o custom-columns="IP:.spec.clusterIP" --no-headers=true)
         export CPPort=$(kubectl get svc control-plane -n armonik -o custom-columns="PORT:.spec.ports[*].port" --no-headers=true)
         export Grpc__Endpoint=http://$CPIP:$CPPort

         cd Common/StreamWrapper/tests/Client
         dotnet build
         dotnet run

  release-packages:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/release' }}
    needs:
      - versionning
      - testEndToEnd
      - testStreamWrapper
    steps:
      - name: Download a single artifact
        uses: actions/download-artifact@v2
        with:
          name: release-nugets

      - name: Push the package
        run: dotnet nuget push ./ArmoniK.*.nupkg -k ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

  release-images:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/release' }}
    needs:
      - versionning
      - testEndToEnd
      - testStreamWrapper
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
      RELEASE: ${{ needs.versionning.outputs.release }}
    strategy:
      matrix:
        image:
          - dockerhubaneo/armonik_worker_dll
          - dockerhubaneo/armonik_streamwrapper_test
    steps:
      - name: login
        run: |
          echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u dhaneo1 --password-stdin

      - name: pull
        run: |
          docker pull ${{ matrix.image }}:$VERSION

      - name: tag
        run: |
          docker tag ${{ matrix.image }}:$VERSION ${{ matrix.image }}:$RELEASE

      - name: push
        run: |
          docker push ${{ matrix.image }}:$RELEASE

  tag:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/release' }}
    needs:
      - versionning
      - release-packages
    env:
      RELEASE: ${{ needs.versionning.outputs.release }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }}

    - name: tag
      run: |
        git tag $RELEASE
        git push origin $RELEASE
