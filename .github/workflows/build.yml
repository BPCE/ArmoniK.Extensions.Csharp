name: DeployTest

on:
  push:
    paths:

jobs:
  versionning:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.genver.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.head_ref }}
        fetch-depth: 0

    - name: Generate Version
      id: genver
      run: |
        VERSION=$(docker run --rm -v $(pwd):/repo codacy/git-version /bin/git-version --folder=/repo --release-branch=release --dev-branch=master)
        echo "::set-output name=version::$VERSION"
        echo $VERSION

  buildProjects:
    runs-on: ubuntu-latest
    needs:
      - versionning
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.head_ref }}
        submodules: true

    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.x

    # find . -name "*.csproj" | xargs -I % echo dotnet build % -c Release
    - name: Build the package
      run: |
        dotnet build -c Release ./DataSynapseApi/ArmoniK.DevelopmentKit.GridServer/ArmoniK.DevelopmentKit.GridServer.csproj
        dotnet build -c Release ./DataSynapseApi/ArmoniK.DevelopmentKit.GridServer.Client/ArmoniK.DevelopmentKit.GridServer.Client.csproj
        dotnet build -c Release ./SymphonyApi/ArmoniK.DevelopmentKit.SymphonyApi/ArmoniK.DevelopmentKit.SymphonyApi.csproj
        dotnet build -c Release ./SymphonyApi/ArmoniK.DevelopmentKit.SymphonyApi.Client/ArmoniK.DevelopmentKit.SymphonyApi.Client.csproj
        dotnet build -c Release ./WorkerApi/ArmoniK.DevelopmentKit.WorkerApi/ArmoniK.DevelopmentKit.WorkerApi.csproj
        dotnet build -c Release ./WorkerApi/ArmoniK.DevelopmentKit.WorkerApi.Common/ArmoniK.DevelopmentKit.WorkerApi.Common.csproj
        dotnet build -c Release ./WorkerApi/tests/WorkerApiTests/WorkerApiTests.csproj

    # find . -name "*.csproj" | xargs -I % echo dotnet pack % -c Release -o /tmp/packages -p:PackageVersion=\$VERSION
    - name: Pack the package
      run: |
        dotnet pack ./DataSynapseApi/ArmoniK.DevelopmentKit.GridServer/ArmoniK.DevelopmentKit.GridServer.csproj -c Release -o /tmp/packages -p:PackageVersion=$VERSION
        dotnet pack ./DataSynapseApi/ArmoniK.DevelopmentKit.GridServer.Client/ArmoniK.DevelopmentKit.GridServer.Client.csproj -c Release -o /tmp/packages -p:PackageVersion=$VERSION
        dotnet pack ./SymphonyApi/ArmoniK.DevelopmentKit.SymphonyApi/ArmoniK.DevelopmentKit.SymphonyApi.csproj -c Release -o /tmp/packages -p:PackageVersion=$VERSION
        dotnet pack ./SymphonyApi/ArmoniK.DevelopmentKit.SymphonyApi.Client/ArmoniK.DevelopmentKit.SymphonyApi.Client.csproj -c Release -o /tmp/packages -p:PackageVersion=$VERSION
        dotnet pack ./WorkerApi/ArmoniK.DevelopmentKit.WorkerApi.Common/ArmoniK.DevelopmentKit.WorkerApi.Common.csproj -c Release -o /tmp/packages -p:PackageVersion=$VERSION

    - name: Push the package
      run: dotnet nuget push /tmp/packages/ArmoniK.*.nupkg -k ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

  buildWorker:
    runs-on: ubuntu-latest
    needs:
      - versionning
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.head_ref }}
        submodules: true

    - name: login
      run: |
        echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u dhaneo1 --password-stdin

    - name: build
      run: |
        echo $VERSION
        docker build -t dockerhubaneo/armonik_worker_dll:$VERSION -f WorkerApi/ArmoniK.DevelopmentKit.WorkerApi/Dockerfile .

    - name: push
      run: |
        docker push dockerhubaneo/armonik_worker_dll:$VERSION

  testEndToEnd:
    needs:
      - versionning
      - buildProjects
      - buildWorker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - uses: aneoconsulting/ArmoniK@main
        id: deploy-infra
        with:
          worker-image: dockerhubaneo/armonik_worker_dll
          worker-tag: ${{ needs.versionning.outputs.version }}

      - name: Run EndToEnd.Tests
        run: |
         export CPIP=$(kubectl get svc control-plane -n armonik -o custom-columns="IP:.spec.clusterIP" --no-headers=true)
         export CPPort=$(kubectl get svc control-plane -n armonik -o custom-columns="PORT:.spec.ports[*].port" --no-headers=true)
         export Grpc__Endpoint=http://$CPIP:$CPPort

         cd SymphonyApi/ArmoniK.DevelopmentKit.SymphonyApi.Tests/EndToEnd.Tests/
         dotnet publish --self-contained -r linux-x64 -f net5.0

         sudo chown -R $USER:$USER /data
         cp ../packages/ArmoniK.EndToEndTests-v1.0.0.zip /data

         dotnet run -r linux-x64 -f net5.0

  tag:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/release' }}
    needs:
      - versionning
      - buildWorker
      - buildProjects
      - testEndToEnd
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.head_ref }}

    - name: tag
      run: |
        git tag $VERSION
        git push origin $VERSION
