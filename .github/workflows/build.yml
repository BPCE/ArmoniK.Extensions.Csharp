name: DeployTest

on:
  push:
    branches: [ '**' ]
    tags-ignore: [ '**' ]

jobs:
  versionning:
    name: Versionning
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.genver.outputs.version }}
      release: ${{ steps.genver.outputs.release }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0

    - name: Generate Version
      id: genver
      run: |
        VERSION=$(docker run --rm -v $(pwd):/repo codacy/git-version /bin/git-version --folder=/repo --release-branch=${{ github.ref_name }}-pre --dev-branch=main)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION : $VERSION"
        RELEASE=$(docker run --rm -v $(pwd):/repo codacy/git-version /bin/git-version --folder=/repo --release-branch=${{ github.ref_name }} --dev-branch=main)
        echo "release=$RELEASE" >> $GITHUB_OUTPUT
        echo "RELEASE : $RELEASE"
        echo "Version :" >> $GITHUB_STEP_SUMMARY
        echo "$VERSION" >> $GITHUB_STEP_SUMMARY
        echo "Release :" >> $GITHUB_STEP_SUMMARY
        echo "$RELEASE :" >> $GITHUB_STEP_SUMMARY

  format:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0
        submodules: true

    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.x

    - name: Install ReSharper
      run: |
        dotnet tool install -g JetBrains.ReSharper.GlobalTools --version 2022.2.2

    - name: Restore
      run: |
        dotnet restore ArmoniK.Extensions.Csharp.sln

    - name: Reformat
      run: |
        jb cleanupcode --exclude="**.props" ArmoniK.Extensions.Csharp.sln

    - name: Check Diff
      run: |
        DIFF="$(git diff --name-only)"

        if [ -z "$DIFF" ]; then
          echo "OK: Format is clean"
        else
          echo "Error: Format was not clean"
          echo "List of files:"
          echo "$DIFF"
          git diff
          exit 1
        fi

  buildProjects:
    runs-on: ubuntu-latest
    needs:
      - versionning
    env:
      GENVERSION: ${{ needs.versionning.outputs.version }}
      GENRELEASE: ${{ needs.versionning.outputs.release }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}
        submodules: true

    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.x
      #   source-url: https://pkgs.dev.azure.com/aneofr/ArmoniK/_packaging/ArmoniKPackages/nuget/v3/index.json
      # env:
      #   NUGET_AUTH_TOKEN: ${{secrets.PAT_AZURE}}

    - name: Build the package
      run: |
        dotnet build ArmoniK.Extensions.Csharp.sln -c Release -p:Version=$GENVERSION

    - name: Pack the package VERSION
      run: |
        dotnet pack ArmoniK.Extensions.Csharp.sln -c Release -p:Version=$GENVERSION
    #     mkdir -p /tmp/packages
    #     mv ./publish/*.* /tmp/packages/

    # - name: Store the package VERSION
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: prerelease-nugets
    #     path: /tmp/packages/*.nupkg
    #     retention-days: 5

    # - name: Pack the package RELEASE
    #   if: ${{ github.ref == 'refs/heads/release' }}
    #   run: |
    #     dotnet pack ArmoniK.Extensions.Csharp.sln -c Release -p:Version=$GENRELEASE
    #     mkdir -p /tmp/releases
    #     mv ./publish/*.* /tmp/releases/

    # - name: Store the package RELEASE
    #   if: ${{ github.ref == 'refs/heads/release' }}
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: release-nugets
    #     path: /tmp/releases/*.nupkg
    #     retention-days: 5

    - name: Push the package
      run: |
        dotnet nuget push /tmp/packages/ArmoniK.*.nupkg -k ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate --no-symbols --exclude "/tmp/packages/ArmoniK.*test*.nupkg"

  buildWorkerEnd2End:
    runs-on: ubuntu-latest
    needs:
      - versionning
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}
        submodules: true

    - name: login
      run: |
        echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_LOGIN }} --password-stdin

    - name: build
      run: |
        docker build -t dockerhubaneo/armonik_worker_dll:$VERSION -f Worker/src/DLLWorker/Dockerfile .

    - name: push
      run: |
        docker push dockerhubaneo/armonik_worker_dll:$VERSION

  buildImagesCross:
    runs-on: ubuntu-latest
    needs:
      - versionning
      - buildWorkerEnd2End
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

    - name: login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_LOGIN }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: platforms
      run: echo ${{ steps.buildx.outputs.platforms }}

    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        file: Worker/src/DLLWorker/Dockerfile
        context: .
        platforms: linux/arm64
        push: true
        tags: |
            dockerhubaneo/armonik_worker_dll:${{ needs.versionning.outputs.version }}-arm

    - name: Create multi-arch manifest
      run: docker buildx imagetools create dockerhubaneo/armonik_worker_dll:${VERSION} --tag dockerhubaneo/armonik_worker_dll:${VERSION} --append dockerhubaneo/armonik_worker_dll:${VERSION}-arm


  testEndToEnd:
    needs:
      - versionning
      - buildProjects
      - buildWorkerEnd2End
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - uses: aneoconsulting/ArmoniK@main
        id: deploy-infra
        with:
          worker-image: dockerhubaneo/armonik_worker_dll
          worker-tag: ${{ needs.versionning.outputs.version }}
          ingress: 'None'

      - name: Run EndToEnd.Tests
        timeout-minutes: 15
        run: |
         cd Tests
         mkdir -p ${HOME}/data
         bash -x ./endToEndTests.sh -b -d
         cd -
      
      - name: Run tests
        run: |
         kubectl get svc -n armonik -o wide
         export CPIP=$(kubectl get svc ingress -n armonik -o jsonpath="{.status.loadBalancer.ingress[0]."ip"}")
         export CPHOST=$(kubectl get svc ingress -n armonik -o jsonpath="{.status.loadBalancer.ingress[0]."hostname"}")
         export CPIP=${CPHOST:-$CPIP}
         export CPPort=$(kubectl get svc ingress -n armonik -o custom-columns="PORT:.spec.ports[1].port" --no-headers=true)
         export Grpc__Endpoint=http://$CPIP:$CPPort
         dotnet test --runtime linux-x64 -f net6.0 --logger "trx;LogFileName=test-results.trx"
         
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: IntegrationTests
          path: ./Tests/ArmoniK.EndToEndTests/ArmoniK.EndToEndTests.Client/TestResults/test-results.trx
          reporter: dotnet-trx

  # release-packages:
  #   runs-on: ubuntu-latest
  #   if: ${{ github.ref == 'refs/heads/release' }}
  #   needs:
  #     - versionning
  #     - testEndToEnd
  #   steps:
  #     - name: Download a single artifact
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: release-nugets

  #     - name: Push the package
  #       run: dotnet nuget push ./ArmoniK.*.nupkg -k ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

  # release-images:
  #   runs-on: ubuntu-latest
  #   if: ${{ github.ref == 'refs/heads/release' }}
  #   needs:
  #     - versionning
  #     - testEndToEnd
  #   env:
  #     VERSION: ${{ needs.versionning.outputs.version }}
  #     RELEASE: ${{ needs.versionning.outputs.release }}
  #   strategy:
  #     matrix:
  #       image:
  #         - dockerhubaneo/armonik_worker_dll
  #   steps:
  #     - name: login
  #       run: |
  #         echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u dhaneo1 --password-stdin

  #     - name: pull
  #       run: |
  #         docker pull ${{ matrix.image }}:$VERSION

  #     - name: tag
  #       run: |
  #         docker tag ${{ matrix.image }}:$VERSION ${{ matrix.image }}:$RELEASE

  #     - name: push
  #       run: |
  #         docker push ${{ matrix.image }}:$RELEASE

  # tag:
  #   runs-on: ubuntu-latest
  #   if: ${{ github.ref == 'refs/heads/release' }}
  #   needs:
  #     - versionning
  #     - release-packages
  #   env:
  #     RELEASE: ${{ needs.versionning.outputs.release }}
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3
  #     with:
  #       ref: ${{ github.ref }}

  #   - name: tag
  #     run: |
  #       git tag $RELEASE
  #       git push origin $RELEASE
